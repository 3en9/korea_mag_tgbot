# import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import asyncio
from base import add_basket, new_row, clear_basket, del_position, get_basket, new_order

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = '7556339020:AAEloe-nvDTBpFw-4jv-RD6WgEryZiKzMBw'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

manager_id = 7360205850


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_store_number = State()
    waiting_for_product_link = State()
    waiting_for_product_details = State()
    waiting_for_delete_position = State()


# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ üõí")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É üõç")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
cart_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É ‚úèÔ∏è")],
        [KeyboardButton(text="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ üì¶")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
edit_cart_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É ‚ùå")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é üóë")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]
    ],
    resize_keyboard=True
)
f = open('mags.txt')
txt = list(map(lambda x: x.split(':'), f.read().split('\n')))
f.close()
shop_dict = dict()
shop_list = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:\n'
for i in range(len(txt)):
    name = txt[i][0]
    url = ':'.join(txt[i][1:])
    shop_dict[i+1] = name
    shop_list += f'{i+1}. {name} {url}\n'

# print(shop_list)
print(shop_dict)

hi_message = '–ü—Ä–∏–≤–µ—Ç!\n–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ü–æ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ –∏–∑ –ö–æ—Ä–µ–∏ –≤ –†–æ—Å—Å–∏—é üá∞üá∑üá∑üá∫.\n–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∞ –∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ—Ä–µ–π—Å–∫–∏–µ —Å–∞–π—Ç—ã. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–∏ –∏—Ö –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ —Ä—É—Å—Å–∫–∏–π. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ö –≤ –±–æ—Ç.\n–ü–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã —Ç–≤–æ–π –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –î–∞—Ä–∏–Ω–µ, –æ–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—é üì¶\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @darinasei.\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —à–æ–ø–ø–∏–Ω–≥–∞ üíãüõçÔ∏è'


@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message):
    try:
        new_row(message.from_user.id)
    except:
        pass
    await message.answer(hi_message, reply_markup=main_menu)


@dp.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ üõí")
async def start_shopping(message: types.Message, state: FSMContext):
    await message.answer(shop_list)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
    await state.set_state(Form.waiting_for_store_number)


@dp.message(Form.waiting_for_store_number)
async def store_number_entered(message: types.Message, state: FSMContext):
    await state.update_data(store_number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(Form.waiting_for_product_link)


@dp.message(Form.waiting_for_product_link)
async def product_link_entered(message: types.Message, state: FSMContext):
    await state.update_data(product_link=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (—Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç –∏ —Ç.–¥.):")
    await state.set_state(Form.waiting_for_product_details)


@dp.message(Form.waiting_for_product_details)
async def product_details_entered(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    product = {
        "store": user_data['store_number'],
        "link": user_data['product_link'],
        "details": message.text
    }
    try:
        mag = shop_dict[int(product['store'])]
    except:
        mag = product['store']
    note = '–ú–∞–≥–∞–∑–∏–Ω: ' + mag+'; –¢–æ–≤–∞—Ä: '+product['link']+'; –î–µ—Ç–∞–ª–∏: '+product['details']
    if not get_basket(user_id):
        new_row(user_id)
    add_basket(user_id, note)
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", reply_markup=main_menu)
    await state.clear()


@dp.message(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É üõç")
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    basket = get_basket(user_id)[1]
    if basket != 'NULL':
        basket = basket.split('\n')
        cart_items = "\n".join([f'{i+1}. {basket[i]}' for i in range(len(basket))])
        await message.answer(f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_items}", reply_markup=cart_menu)
    else:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)


@dp.message(lambda message: message.text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ üì¶")
async def place_order(message: types.Message):
    user_id = message.from_user.id
    basket = get_basket(user_id)[1]
    if basket != 'NULL':
        new_order(user_id, basket)
        try:
            await bot.send_message(manager_id, f'–ó–∞–∫–∞–∑ –æ—Ç @{message.from_user.username}:\n'+basket)
        except:
            await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        else:
            clear_basket(user_id)
            await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.", reply_markup=main_menu)
    else:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)


@dp.message(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É ‚úèÔ∏è")
async def edit_cart(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=edit_cart_menu)


@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É ‚ùå")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    clear_basket(user_id)
    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_menu)


@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é üóë")
async def delete_position(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(Form.waiting_for_delete_position)


@dp.message(Form.waiting_for_delete_position)
async def position_number_entered(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    basket = get_basket(user_id)[1]
    if basket != 'NULL':
        try:
            position_number = int(message.text) - 1
            if 0 <= position_number < len(basket.split('\n')):
                # user_cart[user_id].pop(position_number)
                del_position(user_id, position_number)
                await message.answer("–ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=cart_menu)
                await view_cart(message)
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏.", reply_markup=cart_menu)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏.", reply_markup=cart_menu)
    else:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
    await state.clear()


@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥ üîô")
async def go_back(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...", reply_markup=main_menu)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
